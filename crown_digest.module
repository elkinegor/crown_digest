<?php

/**
 * Implements hook_menu().
 */
function crown_digest_menu() {
  $items = array();

 $items['admin/config/crown'] = array(
    'title' => 'Crown custom modules',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
 
  $items['admin/config/crown/crown_digest'] = array(
    'title' => 'Crown digest setting',
    'description' => 'Crown digest',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crown_digest_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'crown_digest.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/crown/crown_digest_run'] = array(
    'title' => 'Run digest',
    'description' => 'Run digest',
    'page callback' => 'crown_digest_check',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/crown/crown_digest_resend'] = array(
    'title' => 'Resend digest',
    'description' => 'Resend digest',
    'page callback' => 'drupal_get_form',     
    'page arguments' => array('crown_digest_resend'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items; 
}

/**
 * hook_cron_queue_info()
 */
function crown_digest_cron_queue_info() {
  $queues['crown_digest'] = array(
    'worker callback' => 'crown_digest_check', 
    'time' => 30,
    'skip on cron' => true,
  );
  return $queues;
}

function crown_digest_resend() {
  $form = array();
  $form['crown_digest_active'] = array(
    '#markup' => 'Digest active ' . variable_get('crown_digest_active', 'not set') . '<br />',
  );
  $form['crown_digest_re_from'] = array(
    '#type' => 'textfield',
    '#title' => t('Time from') ,
    '#default_value' => variable_get('crown_digest_re_from', '01.01.2016') ,
    '#required' => TRUE,
  );
  $form['crown_digest_re_to'] = array(
    '#type' => 'textfield',
    '#title' => t('Time to') ,
    '#default_value' => variable_get('crown_digest_re_to', '01.01.2017') ,
    '#required' => TRUE,
  );

  $taxonomy_machine_name = variable_get('crown_digest_delivery_machine_name', '');
  //drupal_set_message($taxonomy_machine_name);

  if ($taxonomy_machine_name != '') {
    $taxonomy_vocabulary = taxonomy_vocabulary_machine_name_load($taxonomy_machine_name);
    $terms = taxonomy_get_tree($taxonomy_vocabulary->vid);
    $delivery_types = array();


    foreach($terms as $term) {
      $delivery_types[$term->tid] = $term->name; 
    }

    $form['crown_digest_delivery_types'] = array(
      '#type' => 'checkboxes',
      '#options' => $delivery_types,
      '#title' => t('Select Region') ,
      '#default_value' => variable_get('crown_digest_delivery_types', array()),
      '#required' => TRUE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Resend digest'),
    );
  }

  return $form;
}

function crown_digest_resend_submit($form, &$form_state) {

 variable_set('crown_digest_re_from', $form_state['values']['crown_digest_re_from']);
 variable_set('crown_digest_re_to', $form_state['values']['crown_digest_re_to']);
 variable_set('crown_digest_delivery_types', $form_state['values']['crown_digest_delivery_types']);

 $data['from'] = strtotime($form_state['values']['crown_digest_re_from']);
 $data['to'] = strtotime($form_state['values']['crown_digest_re_to']);
 $data['regions'] = $form_state['values']['crown_digest_delivery_types'];

 //drupal_set_message(print_r($regions,true));
 if (variable_get('crown_digest_active', 0) != 1) {
    digest_prepare_data(true, $data);   
  } else {
    digest_send_mails();
  }

}

function crown_digest_check() { 

  drupal_set_message("Cron run digest");

  if (variable_get('crown_digest_active', 0) != 1) {
    digest_prepare_data();   
  } else {
    digest_send_mails();
  }

  return "Digest run done"; 
}

/**
* Main function that filter and prepare nodes and users
*
*/

function digest_prepare_data($resend = false, $data = array()) {

    // Node filtered by data (only new) and by content type (configure on module admin page)
    $nodes = digest_check_new_nodes($resend,$data);
    $submission_count = variable_get('crown_digest_submission_count', '10');
    $loan_types = variable_get('crown_digest_loan_types', array());

    if (count($nodes) > $submission_count || $resend) {   

        // UID's filtered bby role (configure on module admin page)
        $uids = digest_check_uids($resend,$data);
        // Loan types from module configure+page
        $loan_types = drupal_map_assoc($loan_types);
        // Taxonomy dictionary  VID for loan types
        $vid = digest_get_loan_types_vid();

        $filtered_nodes = array();

        // $nodes[key]->nid,->title,->type,->created
        foreach ($nodes as $key => $node) {

          //Return terms for current node
          $terms = digest_get_terms($vid, $node->nid);

          foreach ($terms as $term) {
            if (isset($loan_types[$term->tid])) {

              $node_obj = node_load($node->nid);
              
              $filtered_nodes[$node->nid]['path'] = $GLOBALS['base_url'].'/'. drupal_get_path_alias('node/'. $node->nid);
              $filtered_nodes[$node->nid]['title'] = $node->title;
              $filtered_nodes[$node->nid]['terms'][] = $term;
              $filtered_nodes[$node->nid]['ntype'] = $node->type;

              // get attention level for request
              if (isset($node_obj->field_attention_level['und'])) {
                $attention_level_tid = $node_obj->field_attention_level['und'][0]['tid'];
                $term = taxonomy_term_load($attention_level_tid);

                if (isset($term->field_action_level_image['und'][0])) {

                  $pic = file_create_url($term->field_action_level_image['und'][0]['uri']);
                  $filtered_nodes[$node->nid]['attention_level'] = '<a target="_blank" href="'.$GLOBALS['base_root'].'/taxonomy/'.$attention_level_tid.'"><img width="100" height="100" src="'.$pic.'"></a>';
                } else {
                  $filtered_nodes[$node->nid]['attention_level'] = '';
                }  
              } else {
                $filtered_nodes[$node->nid]['attention_level'] = '';
              } 

              // get user pic
              if (isset($node_obj->picture)) {
                $pic = drupal_basename(file_load($node_obj->picture)->uri);
                $filtered_nodes[$node->nid]['pic'] = '<a target="_blank" href="'.$GLOBALS['base_root'].'/user/'.$node_obj->uid.'"><img width="100" height="100" src="http://crown.com.au/sites/default/files/selfi_clicks/'.$pic.'"></a>';
              } else {
                $filtered_nodes[$node->nid]['pic'] = '';
              }

              // get FIRST NAME
              if (isset($node_obj->field_your_address_details['und'][0]) && isset($node_obj->field_your_address_details['und'][0]['first_name'])) {
                $filtered_nodes[$node->nid]['user_name'] = $node_obj->field_your_address_details['und'][0]['first_name'];
              } else {
                $filtered_nodes[$node->nid]['user_name'] = '';
              }

              // get date ago format
              $filtered_nodes[$node->nid]['date_ago'] = format_date($node_obj->created, 'time ago');

              // get points
              $filtered_nodes[$node->nid]['access_points'] = $node_obj->userpoints_nodeaccess_points_price;

              // get request type
              if (isset($node_obj->field_job_title['und'][0]) && isset($node_obj->field_job_title['und'][0]['tid'])) {
                $field_job_title_tid = $node_obj->field_job_title['und'][0]['tid'];
                $term = taxonomy_term_load($field_job_title_tid);

                $filtered_nodes[$node->nid]['purpose'] = '<a style="color:#747474;text-decoration:none;" target="_blank" href="'.$GLOBALS['base_root'].'/taxonomy/'.$field_job_title_tid.'">'.$term->name.'</a>';
              }

              // get amount required
              if (isset($node_obj->field_loan_amount_required['und'][0]) && isset($node_obj->field_loan_amount_required['und'][0]['value'])) {
                $filtered_nodes[$node->nid]['amount'] = $node_obj->field_loan_amount_required['und'][0]['value'];
              }

              break;
            }
          }
        }
        if (count($filtered_nodes) > $submission_count || $resend) { 

          variable_set('crown_digest_users', $uids);
          variable_set('crown_digest_nodes_list', $filtered_nodes);
          if (!$resend) {
            $last_node = count($nodes)-1; //last node key
            variable_set('crown_digest_last_time',$nodes[$last_node]->created);
          }
          variable_set('crown_digest_active', 1);
        }
    }
}

/**
* Return vid for loan types taxonomy
*/

function digest_get_loan_types_vid() {
  $taxonomy_machine_name = variable_get('crown_digest_taxonomy_machine_name', '');
  $taxonomy_vocabulary = taxonomy_vocabulary_machine_name_load($taxonomy_machine_name);
  return $taxonomy_vocabulary->vid; 
}

/**
* Return terms for current node
*/

function digest_get_terms($vid, $nid) {

  $query = db_select('taxonomy_index', 'tx');
  $query->innerJoin('taxonomy_term_data', 'ttd', 'tx.tid = ttd.tid');
  $query->fields('ttd', array('tid'));
  $query->fields('ttd', array('name'));
  $query->condition('ttd.vid', $vid);
  $query->condition('tx.nid', $nid);
  $terms = $query->execute()->fetchAll();

  return $terms;
}

/**
* Return UID's filtered by role (configure in module)
*/
function digest_check_uids($resend = false, $data = array()) {

  drupal_set_message("Prepare nodes and users for digest");    

  $user_roles = variable_get('crown_digest_roles', array());
  
  if ($resend) {

    $uids = db_select('users_roles', 'ur');
    $uids->innerJoin('field_data_field_user_digest_delivery', 'f', 'ur.uid = f.entity_id');
    $uids->fields('ur', array('uid'));
    $uids->condition('f.field_user_digest_delivery_tid', $data['regions'], 'IN');
    $uids->condition('ur.rid', $user_roles, 'IN');
    $uids = $uids->execute()->fetchCol();

  } else {

    $uids = db_select('users_roles', 'ur');
    $uids->fields('ur', array('uid'));
    $uids->condition('ur.rid', $user_roles, 'IN');
    $uids = $uids->execute()->fetchCol();
  }
  //drupal_set_message(print_r($uids,true));
  $uids = array_unique($uids);
  //drupal_set_message(print_r($uids,true));

  drupal_set_message("Count users = " . count($uids));

  return $uids;
}

/**
* Return nodes filtered by: content type (configure in module)
* and unix data (data last sended node) so we can get new node
*/
function digest_check_new_nodes($resend = false, $data = array()) {

  drupal_set_message("Cron check new nodes");

  $content_types = drupal_map_assoc(variable_get('crown_digest_content_types', array()));

  if (count($content_types) > 0) {

    if ($resend) {   
      $nodes = db_select('node', 'n');
      $nodes->fields('n', array('nid', 'title','created','type'));
      $nodes->condition('n.type', $content_types, 'IN');   
      $nodes->condition('n.created', array($data['from'], $data['to']), 'BETWEEN');
    } else {
      $nodes = db_select('node', 'n');
      $nodes->fields('n', array('nid', 'title','created','type'));
      $nodes->condition('n.type', $content_types, 'IN');
      $nodes->condition('n.created', (int)variable_get('crown_digest_last_time', 0), '>');
    }
    $nodes = $nodes->execute()->fetchAll();

  } else {
    $nodes = array();
  }     

  drupal_set_message("Count new nodes = " . count($nodes) .", date = ".variable_get('crown_digest_last_time', 0));

  return $nodes;
}

/**
* Main function that validate conditions, prepare send mails for users
*
*/

function digest_send_mails() {

  drupal_set_message("Cron send mails");

    $users = user_load_multiple(variable_get('crown_digest_users', array()));
    //$filtered_nodes[nid]->title,type,path,term obj (tid,name)
    $nodes_list = variable_get('crown_digest_nodes_list', array());
    //drupal_set_message(print_r($nodes_list,true));
   
    $mail_title_template = variable_get('crown_digest_email_title', '');
    $mail_body_template = variable_get('crown_digest_email_body', '');
    $row_template = variable_get('crown_digest_email_body_row', '');

    $digest_test_is_active = variable_get('crown_digest_test_is_active', false);
    $test_email = variable_get('crown_digest_test_email', '');
    $send_report = variable_get('crown_digest_report', false);

    $mails_per_cron = variable_get('crown_digest_mails_per_cron', 10);
    $from_mail = variable_get('site_mail', 'admin@crown.com.au');
    $loan_types_check = variable_get('crown_digest_delivery_loan_types_check', false);

    // Count user sent mail for
    $total = 0;
    // List nodes sent mail for, for report mail
    $nodes_lists_for_report = array();

    // All users
    foreach ($users as $key => $user) {

      $user_profile2 = profile2_load_by_user($user->uid, 'finance_products_offered');

      if ($user->status == 1 && isset($user_profile2->field_loan_types_offered)  && isset($user_profile2->field_loan_types_offered['und'])) {

        drupal_set_message(print_r("Ok for email ".$user->mail,true));

        
        $nodes_list_for_cur_user = array();
        $list_for_user_html = '';
        $list_for_admin_html = '';
        $user_loan_types = $user_profile2->field_loan_types_offered['und'];

        $nodes_list_for_cur_user = get_nodes_list_for_cur_user($user_loan_types, $nodes_list, $loan_types_check);

        if (count($nodes_list_for_cur_user) > 0) {  
          // Mail for user
          foreach ($nodes_list_for_cur_user as $nid => $node) {
            //drupal_set_message(print_r($nid,true));
            //drupal_set_message(print_r($node,true));
            //drupal_set_message(print_r($nodes_list[$nid],true));

            $list_for_user_html .= crown_digest_row_template($nid, $node, $nodes_list[$nid], $row_template);

            $list_for_admin_html .= crown_digest_admin_row_template($nid, $node, $nodes_list[$nid]);
          }

          $nodes_lists_for_report[$user->uid]['list'] = $list_for_admin_html;
          $nodes_lists_for_report[$user->uid]['mail'] = $user->mail;

          
          if (isset($user->realname)) {
            $mail_title = str_replace("[username]", $user->realname, $mail_title_template);
            $mail_body = str_replace("[username]", $user->realname, $mail_body_template);
          } 

          $mail_title = str_replace("[todays:date]", date("Y-m-d H:i:s"), $mail_title);
          $mail_body = str_replace("[todays:date]", date("Y-m-d H:i:s"), $mail_body);
          $mail_body = str_replace("[requests_list]", $list_for_user_html, $mail_body);

          $edit_digest_link = '<a target="_blank" href="'.$GLOBALS['base_url'].'/profile-finance_products_offered/'.$user->uid.'/edit">"Finance Products Offered" </a><br /><br />'; 

          $mail_body = str_replace("[edit_digest_link]", $edit_digest_link, $mail_body);

          // Set test mail if true and mail exist
          if ($digest_test_is_active && $test_email != '') {

            $mail_body = 'Submit by '. $user->mail .' <br />'. $mail_body;
            $email =  $test_email;

          } else {
            $email =  $user->mail;
          }  

          // Send email
          crown_digest_mail($mail_title, $mail_body, $email, $from_mail);
     
          $total ++; 
          if ($total > $mails_per_cron){
            break;
          }
        }
      }

      // For this user digest already sent
      unset($users[$key]);
    }

    // Report email for admin
    if ($send_report && (count($nodes_lists_for_report) > 0)) {

      $report_title = 'Email Report for Digest Sent out on Dated ' . date("Y-m-d H:i:s");
      $report_body = '<h2>Email Report for Digest Sent out on Dated ' . date("Y-m-d H:i:s").'</h2>
    <p>Digest Recipients Email:<br />  Finance Request - Title *     - field_loan_type_requested  - Content Type</p><br />';
      foreach ($nodes_lists_for_report as $uid => $userq) {
          $report_body .= $userq['mail'] .':<br />'. $userq['list'] . '<br /><br />';
      }
      crown_digest_mail($report_title, $report_body, $test_email, $from_mail);

      drupal_set_message("Report email was sent to ".$test_email);
    }


    drupal_set_message("Users count ".count($users));

    // Save users for continie send mail in the future
    if (count($users) > 0) {
      variable_set('crown_digest_users', $users);
    } else {
      variable_set('crown_digest_users', array());
      variable_set('crown_digest_nodes_list', array());
      variable_set('crown_digest_active', 0);
    }
}


/**
* Compare node loan types with user loan types
*/
function get_nodes_list_for_cur_user($user_loan_types, $nodes_list, $loan_types_check) {

  $user_loan_tids = array();
  $nodes_list_for_cur_user = array();

  // $user_loan_types[key]->tid,...
  //user subscribe to requests with this terms
  foreach ($user_loan_types as $value) {
    $user_loan_tids[$value['tid']] = $value['tid'];
  }

  // if request have user term, include term to mail
  foreach ($nodes_list as $nid => $node) {
    foreach ($node['terms'] as $term) {
      if (isset($user_loan_tids[$term->tid]) || !$loan_types_check) {
        $nodes_list_for_cur_user[$nid][] = $term;
      }
    }
  } 

  return $nodes_list_for_cur_user;
}

/**
* Return row temlate for admin mail with real data
*/

function crown_digest_admin_row_template($nid, $node, $node_obj) {

  $html = $node_obj['title'].' - ';
  foreach ($node as $term) {
     $html .= $term->name.', ';
  }
  $html .= ' - '.$node_obj['ntype'].'<br />';

  return $html;
}

/**
* Return row temlate for user mail with real data
*/

function crown_digest_row_template($nid, $node, $node_obj, $row_template) {

  //drupal_set_message(print_r($node,true));

  $attention = $node_obj['attention_level'];
  $title = $node_obj['title'];
  $path = $node_obj['path'];
  $pic  = $node_obj['pic'];
  $user_name = $node_obj['user_name'];
  $date_ago = $node_obj['date_ago'];
  $access_points = $node_obj['access_points'];
  $purpose = $node_obj['purpose'];
  $amount = $node_obj['amount'];
  $title_link = '<a target="_blank" style="color:#747474;text-decoration:none;" href="'.$path.'">'.$title.'</a>';

  $row_template = str_replace("[attention]", $attention, $row_template);
  $row_template = str_replace("[nid]", $nid, $row_template);
  $row_template = str_replace("[pic]", $pic, $row_template);
  $row_template = str_replace("[user_name]", $user_name, $row_template);
  $row_template = str_replace("[date_ago]", $date_ago, $row_template);
  $row_template = str_replace("[access_points]", $access_points, $row_template);
  $row_template = str_replace("[purpose]", $purpose, $row_template);
  $row_template = str_replace("[amount]", $amount, $row_template);
  $row_template = str_replace("[title_link]", $title_link, $row_template);

  return $row_template;
}

/**
* Function send mail
*/

function crown_digest_mail($subject, $body, $to, $from) {
    $message = array(
      'to' => $to,
      'subject' => $subject,
      'body' => $body,
      'headers' => array(
        'From' => $from,
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html;charset=utf-8',
      ),
    );
 
    $system = drupal_mail_system('crown_digest', 'mail');
    if (!$system->mail($message)) {
      drupal_set_message("FAIl mail to " .$to); 
    }
}

